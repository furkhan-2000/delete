# Builder stage
FROM python:3.11.9-slim AS builder

WORKDIR /app

# Install required system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    pkg-config \
    libcairo2-dev \
    libfreetype6-dev \
    libpng-dev \
    libjpeg-dev \
    python3-dev \
    git \
    curl \
    unzip \
    # Add required libraries for Trivy and Dependency-Check
    libgl1-mesa-glx \
    libglib2.0-0 && \
    rm -rf /var/lib/apt/lists/*

# Install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Install security tools
RUN pip install --no-cache-dir semgrep bandit && \
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh \
    | sh -s -- -b /usr/local/bin && \
    curl -sLo dependency-check.zip \
    https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip && \
    unzip dependency-check.zip -d /opt && \
    ln -s /opt/dependency-check/bin/dependency-check.sh /usr/local/bin/dependency-check

# Copy app source
COPY . .

# Final stage
FROM python:3.11.9-slim

WORKDIR /sast

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    git \
    curl \
    unzip \
    libcairo2 \
    libfreetype6 \
    libpng16-16 \
    libjpeg62-turbo \
    fontconfig \
    tini \
    # Add required runtime libraries
    libgl1-mesa-glx \
    libglib2.0-0 && \
    rm -rf /var/lib/apt/lists/*

# Set Matplotlib backend
ENV MPLCONFIGDIR=/tmp
ENV MATPLOTLIBRC=/tmp
RUN mkdir -p /tmp && chmod 777 /tmp
RUN echo "backend: Agg" > /tmp/matplotlibrc

# Copy from builder
COPY --from=builder /app /sast
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /opt/dependency-check /opt/dependency-check

# Create user
RUN groupadd --system jenkins && \
    useradd --system --gid jenkins jenkins && \
    chown -R jenkins:jenkins /sast

USER jenkins

HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl --fail http://localhost:5050/health || exit 1

EXPOSE 5050

ENTRYPOINT ["/usr/bin/tini", "--"]
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "5050"]